void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    uv.x = (800.0/450.0)*uv.x - 0.35;

    vec2 center = vec2(0.5, 0.5);
    
    vec2 v = uv-center;
    
    //float dist = pow( v.x*v.x + v.y*v.y  , 0.5 );
    float dist = length(v);
    
    vec4 finalColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    
    vec2 v2 = v*2.0;
    
    float z = pow(1.0-v2.x*v2.x-v2.y*v2.y,0.5);
    
    vec3 normal = vec3(v2.x,v2.y,z);
    
    float alpha = acos(normal.y)/3.1415;
    float betha = 1.0-atan(normal.z,normal.x)/(2.0*3.1415);
    
    vec4 noise = texture(iChannel2,vec2(betha,1.0-alpha)*5.0);
    vec3 myNormal = normal;
    myNormal= normalize(myNormal+noise.rgb*0.5);
    
    float lighting = clamp(dot(normal, normalize(vec3(0.0,0.0,1.0))),0.0,1.0);
    float edge = pow(1.0-clamp(dot(normal,normalize(vec3(0.0,0.0,1.0))),0.0,1.0),7.0);
    
    vec3 cameraPos = vec3(0.0,0.0,4.0);
    vec3 cameraDir = normalize(cameraPos - normal);
    
    vec3 reflectVector = reflect(normal, cameraDir);
    vec3 myReflectVector = reflect(myNormal, cameraDir);
    
    vec4 t1 = texture(iChannel0, reflectVector);
    vec4 t2 = texture(iChannel1, myReflectVector);
    
    float sinu = sin(betha*40.0);
    
    float roughness = 1.0;
    
    if(sinu<0.0)
        roughness = 0.0;
        
    vec4 t = mix(t1, t2, roughness);
    
    if(dist<=0.5)
        finalColor = t*lighting;
        
    vec4 color = vec4(1.0,1.0,1.0,1.0);
    
    fragColor = finalColor;
    
}